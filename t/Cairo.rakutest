use v6;
#use lib '../gnome-native/lib';
use Test;

use Gnome::Cairo::ImageSurface;
use Gnome::Cairo;
use Gnome::Cairo::Enums;

#use Gnome::N::X;
#Gnome::N::debug(:on);

#-------------------------------------------------------------------------------
my Gnome::Cairo $c;
my Gnome::Cairo::ImageSurface $p;
#-------------------------------------------------------------------------------
subtest 'ISA test', {
  $p .= new( :format(CAIRO_FORMAT_ARGB32), :width(128), :height(128));
  $c .= new(:surface($p));
  isa-ok $c, Gnome::Cairo, '.new(:surface)';

  ok $c.is-valid, '.is-valid()';
  $c.clear-object;
  nok $c.is-valid, '.clear-object()';
}

#-------------------------------------------------------------------------------
# set environment variable 'raku-test-all' if rest must be tested too.
unless %*ENV<raku_test_all>:exists {
  done-testing;
  exit;
}

#-------------------------------------------------------------------------------
subtest 'Manipulations', {
  $p .= new( :format(CAIRO_FORMAT_ARGB32), :width(128), :height(128));
  $c .= new(:surface($p));
  is cairo_status_t($c.cairo-status), CAIRO_STATUS_SUCCESS, '.cairo-status()';

  $c.set-antialias(CAIRO_ANTIALIAS_GRAY);
  is $c.get-antialias, CAIRO_ANTIALIAS_GRAY,
   '.set-antialias() / .get-antialias()';

  $c.new-path;
  my Num ( $x, $y);
  ( $x, $y) = $c.get-current-point;
  is-deeply ( $x, $y), ( 0e0, 0e0), '.new-path() / .get-current-point()';


  lives-ok {
    with $c {
      .save;
      .arc( 0, 0, 1, 0, 2 * π);
      .arc-negative( 0, 0, 1, 0, 2 * π);
      .clip;
      diag "extends: " ~ .clip-extents.raku;
      .clip-preserve;
      .restore;
    }
  }, '.save(), .arc(), .arc-negative(), .clip(), .clip-extents(), .restore, ' ~
     '.clip-preserve()';
}

#-------------------------------------------------------------------------------
done-testing;

=finish
